import weakref

from typing import (
    Any,
    Callable,
    Generic,
    Optional,
    TypeVar,
    Union,
)


class LRI(dict):
    def __init__(self, max_size: Optional[int], values: Optional[Any], on_miss: Optional[Callable]) -> None: ...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __getitem__(self, key: str) -> str: ...

_CPT = TypeVar('_CPT')

class cachedproperty(Generic[_CPT]):
    def __init__(self, func: Callable[[Any], _CPT]) -> None: ...
    def __get__(self, obj: Any, objtype: Optional[type]) -> _CPT: ...
    def __repr__(self) -> str: ...

class MinIDMap(object):
    def __init__(self) -> None: ...
    def get(self, a: Any) -> int: ...
    def drop(self, a: Any) -> None: ...
    def _clean(self, ref: weakref.ref) -> None: ...
